#!/usr/bin/env bash
set -euo pipefail
_output() {
  echo ""
  echo "ðŸ›   $@  (${SECONDS}s)"
}

_output "START"

export BUILDKIT_PROGRESS=plain
export DOCKER_BUILDKIT=1

export TAG=${TAG:-latest}
export CACHE_TAG=${CACHE_TAG:-$TAG}
export WORKDIR=${WORKDIR:-/workspace}

cd "$WORKDIR"

_output "pwd: $(pwd)"
_output "docker version:"


printf "$(docker version)"
echo ""

_output "export:"
export

if gcloud container images describe "$REGISTRY/$IMAGE:$TAG"; then
  _output "EXISTS $REGISTRY/$IMAGE:$TAG"
  _output "OK -- NOP"
  exit 0
fi

_output "PULL images"

# https://github.com/moby/buildkit/issues/1271
from_images=""
copy_froms=""
set +e
  from_images=$(cat Dockerfile | grep FROM | cut -d' ' -f2)
  copy_froms=$(cat Dockerfile | grep "COPY --from=" | cut -d'=' -f2 | cut -d' ' -f1)
set -e

for image in $from_images $copy_froms; do
  [ "$image" = "scratch" ] && continue
  (
    docker pull "$image" || true
  ) 2>&1 | sed -le "s#^#ðŸ›   pull $image -- #;" &
done

(
  docker pull "$REGISTRY/$IMAGE:$TAG" || true
) 2>&1 | sed -le "s#^#ðŸ›   pull :$TAG -- #;"

if [ "$CACHE_TAG" != "$TAG" ]; then
  (
    docker pull "$REGISTRY/$IMAGE:$CACHE_TAG" || true
  ) 2>&1 | sed -le "s#^#ðŸ›   pull :$CACHE_TAG -- #;"
fi

wait $(jobs -p)

_output "BUILD $REGISTRY/$IMAGE:$TAG with cache from tag :$CACHE_TAG"

(
  docker build --cache-from="$REGISTRY/$IMAGE:$CACHE_TAG" --build-arg BUILDKIT_INLINE_CACHE=1 -t "$REGISTRY/$IMAGE:$TAG" .
) 2>&1 | sed -le "s#^#ðŸ›   build -- #;"

(
  docker tag "$REGISTRY/$IMAGE:$TAG" "$REGISTRY/$IMAGE:$CACHE_TAG"
) 2>&1 | sed -le "s#^#ðŸ›   tag -- #;"

(
  docker push "$REGISTRY/$IMAGE:$TAG"
) 2>&1 | sed -le "s#^#ðŸ›   push tag :$TAG -- #;"

if [ "$CACHE_TAG" != "$TAG" ]; then
  (
    docker push "$REGISTRY/$IMAGE:$CACHE_TAG"
  ) 2>&1 | sed -le "s#^#ðŸ›   push cache :$CACHE_TAG -- #;"
fi

_output "OK -- all"
